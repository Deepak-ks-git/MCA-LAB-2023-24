# -*- coding: utf-8 -*-
"""LAB6knncancer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DjfpYH9VPcgEc5JnqG0DdUkdg_3eT6qj
"""

from google.colab import drive
drive.mount('/content/drive')

#  Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score

#  Load the dataset
data = pd.read_csv("/content/drive/MyDrive/dataset/Cancer_DS - Cancer_DS.csv")

# Explore the dataset
print(data.head())

print(data.info())

print(data['diagnosis'].value_counts())

"""The dataset has features and a 'Diagnosis' column indicating Malignant (M) or Benign (B) cases.
 - Class distribution: 357 benign (B), 212 malignant (M).
"""

#Data Pre-processing
# Encode the 'Diagnosis' column (Malignant = 1, Benign = 0)
data['diagnosis'] = data['diagnosis'].map({'M': 1, 'B': 0})

# Split the dataset into features (X) and target variable (y)
X = data.drop(['id', 'diagnosis'], axis=1)
y = data['diagnosis']

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)



# Implement k-NN with different k-values and choose the best k using validation
k_values = range(1, 21)



best_k = None
best_accuracy = 0

for k in k_values:
    knn = KNeighborsClassifier(n_neighbors=k)
    knn.fit(X_train, y_train)
    y_pred = knn.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)

    if accuracy > best_accuracy:
        best_k = k
        best_accuracy = accuracy

print(f"Best k-value: {best_k}")

"""The best k-value is determined based on the highest accuracy on the validation set."""

#  k-NN Algorithm Implementation
# Create and train a k-NN classifier with the chosen k-value
knn = KNeighborsClassifier(n_neighbors=best_k)
knn.fit(X_train, y_train)

# Make predictions on the test set
y_pred = knn.predict(X_test)

# Evaluate the model's performance (e.g., accuracy)
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy}")