# -*- coding: utf-8 -*-
"""Ex_14_kmeansiris.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vhIcaLGwHQmhI8TydgJ-tF6zgcWnQ0E4
"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.datasets import load_iris
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA

# Load the Iris dataset
iris = load_iris()
iris_df = pd.DataFrame(data=iris.data, columns=iris.feature_names)

iris_df.head()

# Standardize the features for better performance in K-means
scaler = StandardScaler()
iris_scaled = scaler.fit_transform(iris_df)

# Apply K-means clustering
kmeans = KMeans(n_clusters=3, random_state=42)
iris_df['cluster'] = kmeans.fit_predict(iris_scaled)

# Visualize the results using PCA (2D projection)
pca = PCA(n_components=2)
iris_pca = pca.fit_transform(iris_scaled)

# Standardize the features for better performance in K-means
scaler = StandardScaler()
iris_scaled = scaler.fit_transform(iris)

# Create a DataFrame with the PCA results and cluster assignments
pca_df = pd.DataFrame(data=iris_pca, columns=['PC1', 'PC2'])
pca_df['cluster'] = iris_df['cluster']

# Plot the clusters
plt.figure(figsize=(8, 6))
for cluster in range(3):
    cluster_data = pca_df[pca_df['cluster'] == cluster]
    plt.scatter(cluster_data['PC1'], cluster_data['PC2'], label=f'Cluster {cluster}')

plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='red', marker='X', label='Centroids')
plt.title('K-means Clustering of Iris Dataset')
plt.xlabel('Principal Component 1 (PC1)')
plt.ylabel('Principal Component 2 (PC2)')
plt.legend()
plt.show()

